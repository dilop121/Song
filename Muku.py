# Credits Goes To Mukund...!
# So don't kang it MF


import os
import glob
import json
import logging
import random
import asyncio
import youtube_dl
from pytube import YouTube
from youtube_search import YoutubeSearch
from pytgcalls import PyTgCalls, idle
from pytgcalls import StreamType
from pytgcalls.types import Update
from pytgcalls.types import AudioPiped, AudioVideoPiped
from pytgcalls.types.stream import StreamAudioEnded, StreamVideoEnded
from pytgcalls.types import (
    HighQualityAudio,
    HighQualityVideo,
    LowQualityVideo,
    MediumQualityVideo
)
from pyrogram import Client, filters
from pyrogram.raw.base import Update
from pyrogram.errors import UserAlreadyParticipant, UserNotParticipant
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from Plugins.queues import QUEUE, add_to_queue, get_queue, clear_queue, pop_an_item
from Plugins.admin_check import *

bot = Client(
    "Music Stream Bot",
    bot_token = os.environ["BOT_TOKEN"],
    api_id = int(os.environ["API_ID"]),
    api_hash = os.environ["API_HASH"]
)

client = Client(os.environ["SESSION_NAME"], int(os.environ["API_ID"]), os.environ["API_HASH"])

app = PyTgCalls(client)

OWNER_ID = int(os.environ["OWNER_ID"])

BOT_USERNAME = os.environ["BOT_USERNAME"]

LIVE_CHATS = []

START_TEXT = """
 ú·¥è…™ 

[¬ª] …™ ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è ·¥ç·¥ús·¥Ñ…™ …™…¥  ô·¥è·¥õ ú ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ä…¥·¥Ö ·¥†…™·¥Ö·¥á·¥è “ì·¥è Ä·¥ç ·¥è…¥ ·¥õ ú·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ.

[¬ª] ·¥ç·¥Ä·¥ã·¥á ·¥ç·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è è.

[¬ª]  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä ·¥è·¥°…¥  ô·¥è·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü ü·¥è·¥°.

[¬ª] “ì·¥è Ä ·¥Ä…¥ è ·¥ã…™…¥·¥Ö ·¥è“ì s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ä·¥è…™…¥ ·¥è·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ.

[¬ª] “ì·¥è Ä ·¥Ä…¥ è “ì·¥ú·¥õ ú·¥á Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥è Ä “ì·¥è Ä ·¥ç·¥è Ä·¥á  ô·¥è·¥õs ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü.
"""

START_BUTTONS = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton("·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
        ],
        [
            InlineKeyboardButton(" ú·¥á ü·¥ò", callback_data="help_back"),
            InlineKeyboardButton(" Ä·¥á·¥ò·¥è", callback_data="repo")
        ],
        [
            InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/alonegroup121"),
            InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á", url="https://t.me/alonegroup121")
        ],
        [
            InlineKeyboardButton("…¢…™·¥†·¥á ·¥ç·¥á  ú·¥á·¥Ä Ä·¥õ", url="https://t.me/dil_sagar_121")
        ]
    ]
)

START_LUL = [
    [ 
        InlineKeyboardButton("·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ", url=f"https://t.me/{BOT_USERNAME}?startgroup=true"),
    ],
    [ 
        InlineKeyboardButton(" ú·¥á ü·¥ò", callback_data="help_back"),
        InlineKeyboardButton(" Ä·¥á·¥ò·¥è", callback_data="repo"),
    ],
    [ 
        InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/ALIEN_X_SUPPORT"),
        InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á", url="https://t.me/ALIEN_X_SUPPORT"),
    ],
    [ 
        InlineKeyboardButton("…¢…™·¥†·¥á ·¥ç·¥á  ú·¥á·¥Ä Ä·¥õ", url="https://t.me/ABOUT_MUKUND/15"),
    ],    
]

BUTTON = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/ALIEN_X_SUPPORT"),
            InlineKeyboardButton(text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á", url="https://t.me/ALIEN_X_UPDATE")
        ]
    ]
)


BUTTONS = InlineKeyboardMarkup(
    [ 
        [ 
            InlineKeyboardButton(text="‚ñ∑", callback_data="pause"),
            InlineKeyboardButton(text="II", callback_data="resume"),
            InlineKeyboardButton(text="‚Ä£‚Ä£I", callback_data="skip"),
            InlineKeyboardButton(text="‚ñ¢", callback_data="stop")
        ],
        [ 
            InlineKeyboardButton(text="üîá", callback_data="mute"),
            InlineKeyboardButton(text="üîä", callback_data="unmute")
        ],
        [ 
            InlineKeyboardButton(text="‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="ok")
        ]
    ]
)

MUKUND_MUSIC = [
    [ 
        InlineKeyboardButton(text="·¥ús·¥á Äs", callback_data="basic_"),
        InlineKeyboardButton(text="·¥è·¥°…¥·¥á Ä", callback_data="owner"),
    ],
    [ 
        InlineKeyboardButton(text="·¥Ä·¥Ö·¥ç…™…¥s", callback_data="admin_cmd"),
        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="mukund"),
    ],
]

A_BUTTONS = [
    [
        InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="ok"),
        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help_back"),
    ],
]
REPO_BUTTONS = [
    [
        InlineKeyboardButton(text="s·¥è·¥ú Ä·¥Ñ·¥á", url="https://github.com/Legend-Mukund/Song"),
    ],
    [ 
        InlineKeyboardButton(text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/ALIEN_X_SUPPORT"),
        InlineKeyboardButton(text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±", url="https://t.me/ALIEN_X_UPDATE"),
        InlineKeyboardButton(text="D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url="https://t.me/LEGEND_MUKUND"),
    ],
    [
        InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="mukund"),
    ],
]

REPO_MSG = """
 ú·¥è…™ 

[¬ª]  ú·¥á Ä·¥á ·¥ç·¥ú·¥ã·¥ú…¥·¥Ö ·¥ç·¥ús…™·¥Ñ …™ ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ …™…¥  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ.

[¬ª]  ô·¥è·¥õ ú ·¥Ä·¥ú·¥Ö…™·¥è + ·¥†…™·¥Ö·¥á·¥è s·¥ú·¥ò·¥ò·¥è Ä·¥õ.

[¬ª] …™ ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥†…™·¥Ö·¥á·¥ès ·¥õ·¥è·¥è s·¥è  è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥á ·¥ç·¥è·¥†…™·¥ás ·¥õ·¥è·¥è.

[¬ª]  ú·¥á Ä·¥á …™s ·¥õ ú·¥á  Ä·¥á·¥ò·¥è “ì·¥è Ä ·¥õ ú·¥á ·¥ç·¥ú·¥ã·¥ú…¥·¥Ö ·¥ç·¥ús…™·¥Ñ.

"""

HELP_TEXT = """
 ú·¥è…™ 

[¬ª]  ú·¥á Ä·¥á …™s ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú “ì·¥è Ä ·¥õ ú·¥á ·¥ç·¥ú·¥ã·¥ú…¥·¥Ö ·¥ç·¥ús…™·¥Ñ.

[¬ª]  Ä·¥á·¥Ä·¥Ö …™·¥õ ·¥Ñ·¥Ä Ä·¥á “ì·¥ú ü ü è …™·¥õ …™s ·¥Ö…™·¥†…™·¥Ö·¥á·¥Ö …™…¥·¥õ·¥è ·¥õ ú Ä·¥á·¥á s·¥á·¥Ñ·¥õ…™·¥è…¥s .

[¬ª] ·¥Ä…¥·¥Ö “ì·¥è Ä ·¥Ä…¥ è ·¥ã…™…¥·¥Ö ·¥è“ì  ú·¥á ü·¥ò ·¥ä·¥è…™…¥ @ALIEN_X_SUPPORT !!!

"""

OWNER_HELP = """
 ú·¥è…™ 

[¬ª]  ú·¥á Ä·¥á …™s ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú “ì·¥è Ä ·¥õ ú·¥á ·¥ç·¥ú·¥ã·¥ú…¥·¥Ö ·¥ç·¥ús…™·¥Ñ.

[¬ª] /restart : ·¥õ·¥è  Ä·¥ás·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ 

[¬ª] s·¥è·¥è…¥ …™ ·¥°…™ ü ü ·¥Ä·¥Ö·¥Ö ·¥ç·¥è Ä·¥á.

[¬ª] ·¥Ä…¥·¥Ö “ì·¥è Ä ·¥Ä…¥ è ·¥ã…™…¥·¥Ö ·¥è“ì  ú·¥á ü·¥ò ·¥ä·¥è…™…¥ @ALIEN_X_SUPPORT !!!

"""

B_HELP = """
`·¥ús·¥á Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös !!!`

[¬ª] /play : ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ …™…¥ ·¥Ä·¥ú·¥Ö…™·¥è “ì·¥è Ä·¥ç ·¥è…¥ ·¥†·¥Ñ.

[¬ª] /vplay : ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ …™…¥ ·¥†…™·¥Ö·¥á·¥è “ì·¥è Ä·¥ç ·¥è…¥ ·¥†·¥Ñ.

[¬ª] /playlist | /queue : ·¥õ·¥è s·¥á·¥á ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥è Ä ·¥ò ü·¥Ä è ü…™s·¥õ ·¥õ ú·¥Ä·¥õ …™s …¢·¥è…™…¥…¢ ·¥õ·¥è  ô·¥á ·¥ò ü·¥Ä è·¥á·¥Ö.

[¬ª] /join : ·¥õ·¥è ·¥Ñ·¥Ä ü ü ·¥õ ú·¥á ·¥ús·¥á Ä  ô·¥è·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ

"""

A_HELP = """
`·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös !!!`

[¬ª] /pause : ·¥õ·¥è ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ ·¥è…¥ ·¥†·¥Ñ.

[¬ª] /resume : ·¥õ·¥è  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ ·¥è…¥ ·¥†·¥Ñ.

[¬ª] /end : ·¥õ·¥è ·¥á…¥·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.

[¬ª] /skip : ·¥õ·¥è s·¥ã…™·¥ò ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ ·¥è…¥ ·¥†·¥Ñ.

[¬ª] /mute : ·¥õ·¥è ·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ ·¥è…¥ ·¥†·¥Ñ.

[¬ª] /unmute : ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ ·¥è…¥ ·¥†·¥Ñ 

"""

@bot.on_callback_query()
def home(Client, CallbackQuery):
    if CallbackQuery.data == "mukund":
        CallbackQuery.edit_message_text(
            START_TEXT,
            reply_markup = InlineKeyboardMarkup(START_LUL)
        )
    elif CallbackQuery.data == "repo":
        CallbackQuery.edit_message_text(
            REPO_MSG,
            reply_markup = InlineKeyboardMarkup(REPO_BUTTONS)
        )
    elif CallbackQuery.data == "admin_cmd":
        CallbackQuery.edit_message_text(
            A_HELP,
            reply_markup = InlineKeyboardMarkup(A_BUTTONS)
        )
    elif CallbackQuery.data == "basic_":
        CallbackQuery.edit_message_text(
            B_HELP,
            reply_markup = InlineKeyboardMarkup(A_BUTTONS)
        )
    elif CallbackQuery.data == "owner":
        CallbackQuery.edit_message_text(
            OWNER_HELP,
            reply_markup = InlineKeyboardMarkup(A_BUTTONS)
        )    
    elif CallbackQuery.data == "help_back":
        CallbackQuery.edit_message_text(
            HELP_TEXT,
            reply_markup = InlineKeyboardMarkup(MUKUND_MUSIC)
        )
    elif CallbackQuery.data == "ok":
        CallbackQuery.message.delete()        

async def skip_current_song(chat_id):
    if chat_id in QUEUE:
        chat_queue = get_queue(chat_id)
        if len(chat_queue) == 1:
            await app.leave_group_call(chat_id)
            clear_queue(chat_id)
            return 1
        else:
            title = chat_queue[1][0]
            duration = chat_queue[1][1]
            link = chat_queue[1][2]
            playlink = chat_queue[1][3]
            type = chat_queue[1][4]
            Q = chat_queue[1][5]
            thumb = chat_queue[1][6]
            if type == "Audio":
                await app.change_stream(
                    chat_id,
                    AudioPiped(
                        playlink,
                    ),
                )
            elif type == "Video":
                if Q == "high":
                    hm = HighQualityVideo()
                elif Q == "mid":
                    hm = MediumQualityVideo()
                elif Q == "low":
                    hm = LowQualityVideo()
                else:
                    hm = MediumQualityVideo()
                await app.change_stream(
                    chat_id, AudioVideoPiped(playlink, HighQualityAudio(), hm)
                )
            pop_an_item(chat_id)
            await bot.send_photo(chat_id, photo = thumb,
                                 caption = f"[¬ª] <b>…¥·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢:</b> [{title}]({link})\n\n[¬ª] “ì·¥è Ä·¥ç·¥Ä·¥õ: `{type}` \n\n[¬ª] <b>·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:</b> {duration}",
                                 reply_markup = BUTTONS)
            return [title, link, type, duration, thumb]
    else:
        return 0


async def skip_item(chat_id, lol):
    if chat_id in QUEUE:
        chat_queue = get_queue(chat_id)
        try:
            x = int(lol)
            title = chat_queue[x][0]
            chat_queue.pop(x)
            return title
        except Exception as e:
            print(e)
            return 0
    else:
        return 0


@app.on_stream_end()
async def on_end_handler(_, update: Update):
    if isinstance(update, StreamAudioEnded):
        chat_id = update.chat_id
        await skip_current_song(chat_id)


@app.on_closed_voice_chat()
async def close_handler(client: PyTgCalls, chat_id: int):
    if chat_id in QUEUE:
        clear_queue(chat_id)
        

async def yt_video(link):
    proc = await asyncio.create_subprocess_exec(
        "yt-dlp",
        "-g",
        "-f",
        "best[height<=?720][width<=?1280]",
        f"{link}",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await proc.communicate()
    if stdout:
        return 1, stdout.decode().split("\n")[0]
    else:
        return 0, stderr.decode()
    

async def yt_audio(link):
    proc = await asyncio.create_subprocess_exec(
        "yt-dlp",
        "-g",
        "-f",
        "bestaudio",
        f"{link}",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await proc.communicate()
    if stdout:
        return 1, stdout.decode().split("\n")[0]
    else:
        return 0, stderr.decode()

# THIS IS CALLBACK FOR FUNCTIONS üåö

@bot.on_callback_query()
async def callbacks(_, cq: CallbackQuery):
    user_id = cq.from_user.id
    try:
        user = await cq.message.chat.get_member(user_id)
        admin_strings = ("creator", "administrator")
        if user.status not in admin_strings:
            is_admin = False
        else:
            is_admin = True
    except ValueError:
        is_admin = True        
    if not is_admin:
        return await cq.answer("[¬ª]  è·¥è·¥ú ·¥Ä Ä·¥á…¥'·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.")   
    chat_id = cq.message.chat.id
    data = cq.data
    if data == "close":
        return await cq.message.delete()
    if not chat_id in QUEUE:
        return await cq.answer("[¬ª] …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")

    if data == "pause":
        try:
            await app.pause_stream(chat_id)
            await cq.answer("[¬ª] ·¥ò·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        except:
            await cq.answer("[¬ª] …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
      
    elif data == "resume":
        try:
            await app.resume_stream(chat_id)
            await cq.answer("[¬ª] Resumed streaming.")
        except:
            await cq.answer("[¬ª] …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")   

    elif data == "stop":
        await app.leave_group_call(chat_id)
        clear_queue(chat_id)
        await cq.answer("[¬ª] s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")  

    elif data == "mute":
        try:
            await app.mute_stream(chat_id)
            await cq.answer("[¬ª] ·¥ç·¥ú·¥õ·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        except:
            await cq.answer("[¬ª] …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
            
    elif data == "unmute":
        try:
            await app.unmute_stream(chat_id)
            await cq.answer("[¬ª] ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        except:
            await cq.answer("[¬ª] …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
            
    elif data == "skip":
        op = await skip_current_song(chat_id)
        if op == 0:
            await cq.answer("[¬ª] …¥·¥è·¥õ ú…™…¥…¢ …™…¥ ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥õ·¥è s·¥ã…™·¥ò.")
        elif op == 1:
            await cq.answer("[¬ª] ·¥á·¥ç·¥ò·¥õ è «´·¥ú·¥á·¥ú·¥á, s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        else:
            await cq.answer("[¬ª] s·¥ã…™·¥ò·¥ò·¥á·¥Ö.")

GROUP_BUTTONS = [ 
    [ 
        InlineKeyboardButton(text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/ALIEN_X_SUPPORT"),
        InlineKeyboardButton(text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±", url="https://t.me/ALIEN_X_UPDATE"),
    ],
    [ 
        InlineKeyboardButton(text="s·¥è·¥ú Ä·¥Ñ·¥á", url="https://github.com/Legend-Mukund/Song"),
        InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="ok")
    ]
]            
            
@bot.on_message(filters.command("help"))
async def help_private(_, message):
    msg = HELP_TEXT.format(message.from_user.mention)
    await message.reply_text(text = msg,
                             reply_markup = MUKUND_MUSIC)            
 
@bot.on_message(filters.command("start") & filters.private)
async def start_private(_, message):
    msg = START_TEXT.format(message.from_user.mention)
    await message.reply_text(text = msg,
                             reply_markup = START_BUTTONS)

@bot.on_message(filters.command("start") & filters.group)
async def start(_, message):
    msg = START_TEXT.format(message.from_user.mention)
    await message.reply_text(text = msg,
                             reply_markup = GROUP_BUTTONS)
    

@bot.on_message(filters.command(["play", "vplay"]) & filters.group)
async def video_play(_, message):
    await message.delete()
    user_id = message.from_user.id
    state = message.command[0].lower()
    try:
        query = message.text.split(None, 1)[1]
    except:
        return await message.reply_text(f"<b>·¥ús·¥Ä…¢·¥á:</b> <code>/{state} [query]</code>")
    chat_id = message.chat.id
    if chat_id in LIVE_CHATS:
        return await message.reply_text("‚ùóÔ∏è·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö <code>/stop</code> ·¥õ·¥è ·¥á…¥·¥Ö ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  ü…™·¥†·¥á s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ô·¥á“ì·¥è Ä·¥á ·¥ò ü·¥Ä è s·¥è…¥…¢s ·¥è Ä ·¥†…™·¥Ö·¥á·¥ès.")
    
    m = await message.reply_text("üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...")
    if state == "play":
        damn = AudioPiped
        ded = yt_audio
        doom = "Audio"
    elif state == "vplay":
        damn = AudioVideoPiped
        ded = yt_video
        doom = "Video"
    if "low" in query:
        Q = "low"
    elif "mid" in query:
        Q = "mid"
    elif "high" in query:
        Q = "high"
    else:
        Q = "0"
    try:
        results = YoutubeSearch(query, max_results=1).to_dict()
        link = f"https://youtube.com{results[0]['url_suffix']}"
        thumb = results[0]["thumbnails"][0]
        duration = results[0]["duration"]
        yt = YouTube(link)
        cap = f"[¬ª] <b>…¥·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢:</b> [{yt.title}]({link})\n\n[¬ª] “ì·¥è Ä·¥ç·¥Ä·¥õ: `{doom}` \n\n[¬ª] <b>·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:</b> {duration}"
        try:
            ydl_opts = {"format": "bestvideo[height<=720]+bestaudio/best[height<=720]"}
            ydl = youtube_dl.YoutubeDL(ydl_opts)
            info_dict = ydl.extract_info(link, download=False)
            p = json.dumps(info_dict)
            a = json.loads(p)
            playlink = a['formats'][1]['manifest_url']
        except:
            ice, playlink = await ded(link)
            if ice == "0":
                return await m.edit("‚ùóÔ∏è è·¥õ·¥Ö ü ·¥á Ä Ä·¥è Ä !!!")               
    except Exception as e:
        return await m.edit(str(e))
    
    try:
        if chat_id in QUEUE:
            position = add_to_queue(chat_id, yt.title, duration, link, playlink, doom, Q, thumb)
            caps = f"#Ô∏è‚É£ [{yt.title}]({link}) <b>«´·¥ú·¥á·¥ú·¥á·¥Ö ·¥Ä·¥õ ·¥ò·¥ès…™·¥õ…™·¥è…¥ {position}</b> \n\n‚è≥ <b>·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:</b> {duration}"
            await message.reply_photo(thumb, caption=caps)
            await m.delete()
        else:            
            await app.join_group_call(
                chat_id,
                damn(playlink),
                stream_type=StreamType().pulse_stream
            )
            add_to_queue(chat_id, yt.title, duration, link, playlink, doom, Q, thumb)
            await message.reply_photo(thumb, caption=cap, reply_markup=BUTTON)
            await m.delete()
    except Exception as e:
        return await m.edit(str(e))
    
@bot.on_message(filters.command(["join", "join@{BOT_USERNAME}"]) & filters.group)
async def join_chat(c: Client, m: Message):
    chat_id = m.chat.id
    try:
        invitelink = await c.export_chat_invite_link(chat_id)
        if invitelink.startswith("https://t.me/+"):
            invitelink = invitelink.replace(
                "https://t.me/+", "https://t.me/joinchat/"
            )
            await client.join_chat(invitelink)
            return await client.send_message(chat_id, "‚úÖ Assistant joined chat")
    except UserAlreadyParticipant:
        return await client.send_message(chat_id, "‚úÖ Assistant already in chat")    
    
@bot.on_message(filters.command(["saudio", "svideo"]) & filters.group)
@is_admin
async def stream_func(_, message):
    await message.delete()
    state = message.command[0].lower()
    try:
        link = message.text.split(None, 1)[1]
    except:
        return await message.reply_text(f"<b>·¥ús·¥Ä…¢·¥á:</b> <code>/{state} [link]</code>")
    chat_id = message.chat.id
    
    if state == "saudio":
        damn = AudioPiped
        emj = "üéµ"
    elif state == "svideo":
        damn = AudioVideoPiped
        emj = "üé¨"
    m = await message.reply_text("üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...")
    try:
        if chat_id in QUEUE:
            return await m.edit("‚ùóÔ∏è·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö <code>/stop</code> ·¥õ·¥è ·¥á…¥·¥Ö ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ  ô·¥á“ì·¥è Ä·¥á  ü…™·¥†·¥á s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        elif chat_id in LIVE_CHATS:
            await app.change_stream(
                chat_id,
                damn(link)
            )
            await m.edit(f"{emj} s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢: [Link]({link})", disable_web_page_preview=True)
        else:    
            await app.join_group_call(
                chat_id,
                damn(link),
                stream_type=StreamType().pulse_stream)
            await m.edit(f"{emj} s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢: [Link]({link})", disable_web_page_preview=True)
            LIVE_CHATS.append(chat_id)
    except Exception as e:
        return await m.edit(str(e))


@bot.on_message(filters.command("skip") & filters.group)
@is_admin
async def skip(_, message):
    await message.delete()
    chat_id = message.chat.id
    if len(message.command) < 2:
        op = await skip_current_song(chat_id)
        if op == 0:
            await message.reply_text("‚ùóÔ∏è…¥·¥è·¥õ ú…™…¥…¢ …™…¥ ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥õ·¥è s·¥ã…™·¥ò.")
        elif op == 1:
            await message.reply_text("‚ùóÔ∏è·¥á·¥ç·¥ò·¥õ è «´·¥ú·¥á·¥ú·¥á, s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
    else:
        skip = message.text.split(None, 1)[1]
        out = "üóë < ô> Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢ s·¥è…¥…¢s “ì Ä·¥è·¥ç ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á:</b> \n"
        if chat_id in QUEUE:
            items = [int(x) for x in skip.split(" ") if x.isdigit()]
            items.sort(reverse=True)
            for x in items:
                if x == 0:
                    pass
                else:
                    hm = await skip_item(chat_id, x)
                    if hm == 0:
                        pass
                    else:
                        out = out + "\n" + f"<b>#Ô∏è‚É£ {x}</b> - {hm}"
            await message.reply_text(out)
            
ALIVE_TEXT = """
[¬ª]  è·¥è  è·¥è ·¥ç·¥ú·¥ã·¥ú…¥·¥Ö ·¥ç·¥ús…™·¥Ñ  ú·¥á Ä·¥á.

[¬ª] ·¥ús·¥á Ä ô·¥è·¥õ : `·¥Ä ü…™·¥†·¥á`

[¬ª] ·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†·¥á Äs…™·¥è…¥ : `1.4.16`

"""
@bot.on_message(filters.command("alive"))
async def alive(_, message):
    user_id = message.from_user.id
    if user_id != OWNER_ID:
        return
    await message.reply_photo(random.choice(PHOTO), caption=ALIVE_TEXT, reply_markup = BUTTON)

                    
@bot.on_message(filters.command(["playlist", "queue"]) & filters.group)
@is_admin
async def playlist(_, message):
    chat_id = message.chat.id
    if chat_id in QUEUE:
        chat_queue = get_queue(chat_id)
        if len(chat_queue) == 1:
            await message.delete()
            await message.reply_text(
                f"‚ñ∂Ô∏è <b>…¥·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢:</b> [{chat_queue[0][0]}]({chat_queue[0][2]}) | `{chat_queue[0][4]}`",
                disable_web_page_preview=True,
            )
        else:
            out = f"<b>üìÉ Player queue:</b> \n\n‚ñ∂Ô∏è <b>…¥·¥è·¥° ·¥ò ü·¥Ä è…™…¥…¢:</b> [{chat_queue[0][0]}]({chat_queue[0][2]}) | `{chat_queue[0][4]}` \n"
            l = len(chat_queue)
            for x in range(1, l):
                title = chat_queue[x][0]
                link = chat_queue[x][2]
                type = chat_queue[x][4]
                out = out + "\n" + f"<b>#Ô∏è‚É£ {x}</b> - [{title}]({link}) | `{type}` \n"
            await message.reply_text(out, disable_web_page_preview=True)
    else:
        await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
    

@bot.on_message(filters.command("stop") & filters.group)
@is_admin
async def end(_, message):
    await message.delete()
    chat_id = message.chat.id
    if chat_id in LIVE_CHATS:
        await app.leave_group_call(chat_id)
        LIVE_CHATS.remove(chat_id)
        return await message.reply_text("‚ñ¢ s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        
    if chat_id in QUEUE:
        await app.leave_group_call(chat_id)
        clear_queue(chat_id)
        await message.reply_text("‚ñ¢ s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
    else:
        await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
        

@bot.on_message(filters.command("pause") & filters.group)
@is_admin
async def pause(_, message):
    await message.delete()
    chat_id = message.chat.id
    if chat_id in QUEUE:
        try:
            await app.pause_stream(chat_id)
            await message.reply_text("II ·¥ò·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        except:
            await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
    else:
        await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
        
        
@bot.on_message(filters.command("resume") & filters.group)
@is_admin
async def resume(_, message):
    await message.delete()
    chat_id = message.chat.id
    if chat_id in QUEUE:
        try:
            await app.resume_stream(chat_id)
            await message.reply_text("‚ñ∑  Ä·¥ás·¥ú·¥ç·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        except:
            await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
    else:
        await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
        
        
@bot.on_message(filters.command("mute") & filters.group)
@is_admin
async def mute(_, message):
    await message.delete()
    chat_id = message.chat.id
    if chat_id in QUEUE:
        try:
            await app.mute_stream(chat_id)
            await message.reply_text("üîá ·¥ç·¥ú·¥õ·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        except:
            await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
    else:
        await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
        
        
@bot.on_message(filters.command("unmute") & filters.group)
@is_admin
async def unmute(_, message):
    await message.delete()
    chat_id = message.chat.id
    if chat_id in QUEUE:
        try:
            await app.unmute_stream(chat_id)
            await message.reply_text("üîä ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.")
        except:
            await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")
    else:
        await message.reply_text("‚ùó…¥·¥è·¥õ ú…™…¥…¢ …™s ·¥ò ü·¥Ä è…™…¥…¢.")

PHOTO = [
    "https://telegra.ph/file/8d5ae37f8b4b2b1b64763.jpg",
    "https://telegra.ph/file/2d4d106a4b4ecacb99374.jpg",
    "https://telegra.ph/file/e635ced7273b64341adea.jpg",
    "https://telegra.ph/file/e42dfbac4be6ddbf1d99f.jpg",
    "https://telegra.ph/file/db0a91985e4e963b6ef31.jpg",
    "https://telegra.ph/file/9434e8ead90db9a5404e2.jpg",
]


@bot.on_message(filters.command("broadcast"))
async def broadcast(_, message: Message):
    sent=0
    failed=0
    if message.from_user.id not in OWNER_ID:
        return
    else:
        mukund = await message.reply("`s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ ·¥°·¥Ä…™·¥õüë©‚Äçüíª`")
        if not message.reply_to_message:
            await mukund.edit("**__…¢…™·¥ç·¥ç…™ ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ...__**")
            return
        devu = message.reply_to_message.text
        async for dialog in client.iter_dialogs():
            try:
                await client.send_message(dialog.chat.id, devu)
                sent = sent+1
                await mukund.edit(f"` ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢` \n\n**s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü …™…¥:** `{sent}` ·¥Ñ ú·¥Ä·¥õs \n**·¥ú…¥s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü …™…¥:** {failed} ·¥Ñ ú·¥Ä·¥õsüóëÔ∏è")
                await asyncio.sleep(3)
            except:
                failed=failed+1
        await message.reply_photo(random.choice(PHOTO), caption=f"`s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è ·¥Ö·¥è…¥·¥áüßö‚Äç‚ôÄÔ∏è` \n\ns·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü**:** `{sent}` ·¥Ñ ú·¥Ä·¥õs \n**“ì·¥Ä…™ ü·¥á·¥Ö :** {failed} ·¥Ñ ú·¥Ä·¥õs")

        
@bot.on_message(filters.command("restart"))
async def restart(_, message):
    user_id = message.from_user.id
    if user_id != OWNER_ID:
        return
    await message.reply_text("üõ† <i> Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä...</i>")
    os.system(f"kill -9 {os.getpid()} && python3 app.py")
            

app.start()
bot.run()
idle()
